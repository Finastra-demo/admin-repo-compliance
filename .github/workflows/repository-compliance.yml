name: Repository Compliance Checker

on:
  workflow_dispatch:
    inputs:
      target_org:
        description: 'Organization to scan'
        required: false
        default: 'finastra-demo'
      dry_run:
        description: 'Dry run - no changes made'
        type: boolean
        default: true
      fix_issues:
        description: 'Auto-fix simple issues'
        type: boolean
        default: false
  
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  TARGET_ORG: ${{ github.event.inputs.target_org || 'finastra-demo' }}
  DRY_RUN: ${{ github.event.inputs.dry_run || 'false' }}

permissions:
  contents: read
  issues: write
  pull-requests: write
  actions: read
  pages: write
  id-token: write

jobs:
  compliance-check:
    name: Repository Compliance Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install Dependencies
        run: |
          pip install PyGithub requests
      
      - name: Validate Token Access
        env:
          GITHUB_TOKEN: ${{ secrets.ORG_COMPLIANCE_TOKEN }}
        run: |
          echo "üîç Testing token access..."
          
          # Test basic authentication
          curl -s -H "Authorization: token $GITHUB_TOKEN" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/user | jq -r '.login // "ERROR"'
          
          # Test organization access
          curl -s -H "Authorization: token $GITHUB_TOKEN" \
               "https://api.github.com/orgs/$TARGET_ORG" | jq -r '.login // "ERROR"'
          
          # Test repository listing
          curl -s -H "Authorization: token $GITHUB_TOKEN" \
               "https://api.github.com/orgs/$TARGET_ORG/repos?per_page=1" | jq -r 'length'
      
      - name: Run Compliance Check
        env:
          GITHUB_TOKEN: ${{ secrets.ORG_COMPLIANCE_TOKEN }}
        run: |
          echo "üöÄ Starting compliance check for organization: $TARGET_ORG"
          echo "üß™ Dry run mode: $DRY_RUN"
          python scripts/compliance-checker.py
      
      - name: Upload Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: compliance-report-${{ env.TARGET_ORG }}-${{ github.run_number }}
          path: |
            compliance-report.json
            compliance-dashboard.html
            *.log
          retention-days: 30
      
      - name: Upload Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: compliance-report-${{ env.TARGET_ORG }}-${{ github.run_number }}
          path: |
            compliance-report.json
            *.log
          retention-days: 30
      
      - name: Prepare Pages Directory
        if: success() && github.ref == 'refs/heads/main'
        run: |
          mkdir -p pages
          cp compliance-dashboard.html pages/index.html
          echo "Dashboard prepared for Pages deployment"
      
      - name: Setup GitHub Pages
        if: success() && github.ref == 'refs/heads/main'
        uses: actions/configure-pages@v4
      
      - name: Upload Dashboard to Pages
        if: success() && github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v3
        with:
          path: './pages'
      
      - name: Deploy to GitHub Pages
        if: success() && github.ref == 'refs/heads/main'
        id: deployment
        uses: actions/deploy-pages@v4
      
      - name: Create Required Labels
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.ORG_COMPLIANCE_TOKEN }}
        run: |
          echo "Creating required labels..."
          
          # Create compliance-failure label
          gh label create "compliance-failure" \
            --color "d73a49" \
            --description "Automated compliance check failure" \
            --force 2>/dev/null || echo "Label compliance-failure already exists or creation failed"
          
          # Create automated label  
          gh label create "automated" \
            --color "0366d6" \
            --description "Automated process or workflow" \
            --force 2>/dev/null || echo "Label automated already exists or creation failed"
          
          # Create high-priority-compliance label
          gh label create "high-priority-compliance" \
            --color "d73a49" \
            --description "High priority compliance issues requiring immediate attention" \
            --force 2>/dev/null || echo "Label high-priority-compliance already exists or creation failed"
          
          # Create compliance-report label
          gh label create "compliance-report" \
            --color "e1e4e8" \
            --description "Automated compliance summary reports" \
            --force 2>/dev/null || echo "Label compliance-report already exists or creation failed"
          
          echo "Label creation completed"
      
      - name: Create Issue Summary
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.ORG_COMPLIANCE_TOKEN }}
        run: |
          echo "Creating failure issue..."
          
          # Create issue with proper escaping
          gh issue create \
            --title "üö® Repository Compliance Check Failed - $(date +%Y-%m-%d)" \
            --body "The automated repository compliance check failed on $(date).

          ## üîç Details
          - **Workflow Run**: [View Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - **Organization**: ${{ env.TARGET_ORG }}
          - **Dry Run**: ${{ env.DRY_RUN }}
          - **Failed At**: $(date '+%Y-%m-%d %H:%M:%S')
          
          ## üõ†Ô∏è Troubleshooting
          1. Check the workflow run logs for specific error messages
          2. Verify that the ORG_COMPLIANCE_TOKEN has proper permissions:
             - repo scope for repository access
             - read:org scope for organization access
          3. Ensure you are a member of the target organization
          4. Check if the organization has any access restrictions
          
          ## üîÑ Next Steps
          - Review the workflow logs
          - Fix any identified issues
          - Re-run the workflow manually
          
          ---
          *This issue was created automatically by the Repository Compliance Checker*" \
                      --label "compliance-failure,automated" || \
                    gh issue create \
                      --title "üö® Repository Compliance Check Failed - $(date +%Y-%m-%d)" \
                      --body "The automated repository compliance check failed. Please check the workflow run for details."
