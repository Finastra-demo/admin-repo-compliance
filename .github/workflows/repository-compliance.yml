name: Repository Compliance Checker

on:
  workflow_dispatch:
    inputs:
      target_org:
        description: 'Organization to scan'
        required: false
        default: 'finastra-demo'
      dry_run:
        description: 'Dry run - no changes made'
        type: boolean
        default: true
      fix_issues:
        description: 'Auto-fix simple issues'
        type: boolean
        default: false
  
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  TARGET_ORG: ${{ github.event.inputs.target_org || 'finastra-demo' }}
  DRY_RUN: ${{ github.event.inputs.dry_run || 'false' }}

permissions:
  contents: read
  issues: write
  pull-requests: write
  actions: read
  pages: write
  id-token: write

jobs:
  compliance-check:
    name: Repository Compliance Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install Dependencies
        run: |
          pip install PyGithub requests
      
      - name: Validate Token Access
        env:
          GITHUB_TOKEN: ${{ secrets.ORG_COMPLIANCE_TOKEN }}
        run: |
          echo "üîç Testing token access..."
          
          # Test basic authentication
          curl -s -H "Authorization: token $GITHUB_TOKEN" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/user | jq -r '.login // "ERROR"'
          
          # Test organization access
          curl -s -H "Authorization: token $GITHUB_TOKEN" \
               "https://api.github.com/orgs/$TARGET_ORG" | jq -r '.login // "ERROR"'
          
          # Test repository listing
          curl -s -H "Authorization: token $GITHUB_TOKEN" \
               "https://api.github.com/orgs/$TARGET_ORG/repos?per_page=1" | jq -r 'length'
      
      - name: Run Compliance Check
        env:
          GITHUB_TOKEN: ${{ secrets.ORG_COMPLIANCE_TOKEN }}
        run: |
          echo "üöÄ Starting compliance check for organization: $TARGET_ORG"
          echo "üß™ Dry run mode: $DRY_RUN"
          python scripts/compliance-checker.py
      
      # FIX: Use consistent artifact names
      - name: Upload Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: compliance-report  # Fixed: Use consistent name
          path: |
            compliance-report.json
            compliance-dashboard.html
            *.log
          retention-days: 30
      
      # FIX: Combine dashboard preparation and pages deployment in main workflow
      - name: Prepare and Deploy to Pages
        if: success() && github.ref == 'refs/heads/main'
        run: |
          echo "üèóÔ∏è Preparing Pages deployment..."
          mkdir -p _site
          
          # Copy dashboard files
          if [ -f "compliance-dashboard.html" ]; then
            cp compliance-dashboard.html _site/index.html
            echo "‚úÖ Dashboard copied"
          else
            echo "‚ùå Dashboard file not found"
            exit 1
          fi
          
          # Copy JSON report if it exists
          if [ -f "compliance-report.json" ]; then
            cp compliance-report.json _site/
            echo "‚úÖ JSON report copied"
          fi
          
          # Create reports index page
          cat > _site/reports.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Compliance Reports - ${{ env.TARGET_ORG }}</title>
              <style>
                  body { 
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                      padding: 40px;
                      background: #f8f9fa;
                  }
                  .container {
                      max-width: 800px;
                      margin: 0 auto;
                      background: white;
                      padding: 40px;
                      border-radius: 12px;
                      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
                  }
                  h1 { color: #0366d6; margin-bottom: 30px; }
                  .file-link { 
                      display: block;
                      margin: 15px 0;
                      padding: 20px;
                      background: #f6f8fa;
                      text-decoration: none;
                      border-radius: 8px;
                      border-left: 4px solid #0366d6;
                      transition: background 0.2s;
                  }
                  .file-link:hover { background: #e1f5fe; }
                  .file-title { font-weight: 600; font-size: 1.1rem; color: #24292f; }
                  .file-desc { color: #586069; margin-top: 5px; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>üìä Repository Compliance Reports</h1>
                  <p>Access the latest compliance data and reports for ${{ env.TARGET_ORG }} organization.</p>
                  
                  <a href="index.html" class="file-link">
                      <div class="file-title">üìà Interactive Compliance Dashboard</div>
                      <div class="file-desc">Visual dashboard with charts, metrics, and repository details</div>
                  </a>
                  
                  <a href="compliance-report.json" class="file-link">
                      <div class="file-title">üìÑ Detailed JSON Report</div>
                      <div class="file-desc">Machine-readable compliance data for automation and analysis</div>
                  </a>
                  
                  <a href="https://github.com/${{ env.TARGET_ORG }}/admin-repo-compliance/actions" class="file-link" target="_blank">
                      <div class="file-title">üîß Workflow Runs</div>
                      <div class="file-desc">View GitHub Actions workflow history and logs</div>
                  </a>
                  
                  <a href="https://github.com/${{ env.TARGET_ORG }}/admin-repo-compliance/issues" class="file-link" target="_blank">
                      <div class="file-title">üìã Compliance Issues</div>
                      <div class="file-desc">Track and manage repository compliance issues</div>
                  </a>
              </div>
          </body>
          </html>
          EOF
          
          echo "üìÅ Pages structure ready:"
          ls -la _site/
      
      - name: Setup Pages
        if: success() && github.ref == 'refs/heads/main'
        uses: actions/configure-pages@v5
      
      - name: Upload to Pages
        if: success() && github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v3
        with:
          path: '_site'
      
      - name: Deploy to GitHub Pages
        if: success() && github.ref == 'refs/heads/main'
        id: deployment
        uses: actions/deploy-pages@v4
      
      - name: Output Results
        if: success() && github.ref == 'refs/heads/main'
        run: |
          echo "üéâ Compliance check completed successfully!"
          echo ""
          echo "üìä Dashboard: ${{ steps.deployment.outputs.page_url }}"
          echo "üìÑ Reports: ${{ steps.deployment.outputs.page_url }}reports.html"
          echo "üìã JSON Data: ${{ steps.deployment.outputs.page_url }}compliance-report.json"
          
          # Set outputs for other workflows if needed
          echo "dashboard_url=${{ steps.deployment.outputs.page_url }}" >> $GITHUB_OUTPUT
      
      - name: Handle Failure - Create Labels
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.ORG_COMPLIANCE_TOKEN }}
        run: |
          echo "Creating required labels..."
          
          # Create compliance-failure label
          gh label create "compliance-failure" \
            --color "d73a49" \
            --description "Automated compliance check failure" \
            --force 2>/dev/null || echo "Label compliance-failure already exists or creation failed"
          
          # Create automated label  
          gh label create "automated" \
            --color "0366d6" \
            --description "Automated process or workflow" \
            --force 2>/dev/null || echo "Label automated already exists or creation failed"
          
          # Create high-priority-compliance label
          gh label create "high-priority-compliance" \
            --color "d73a49" \
            --description "High priority compliance issues requiring immediate attention" \
            --force 2>/dev/null || echo "Label high-priority-compliance already exists or creation failed"
          
          # Create compliance-report label
          gh label create "compliance-report" \
            --color "e1e4e8" \
            --description "Automated compliance summary reports" \
            --force 2>/dev/null || echo "Label compliance-report already exists or creation failed"
          
          echo "Label creation completed"
      
      - name: Create Failure Issue
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.ORG_COMPLIANCE_TOKEN }}
        run: |
          echo "Creating failure issue..."
          
          # Create issue with proper escaping
          gh issue create \
            --title "üö® Repository Compliance Check Failed - $(date +%Y-%m-%d)" \
            --body "The automated repository compliance check failed on $(date).

          ## üîç Details
          - **Workflow Run**: [View Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - **Organization**: ${{ env.TARGET_ORG }}
          - **Dry Run**: ${{ env.DRY_RUN }}
          - **Failed At**: $(date '+%Y-%m-%d %H:%M:%S')
          
          ## üõ†Ô∏è Troubleshooting
          1. Check the workflow run logs for specific error messages
          2. Verify that the ORG_COMPLIANCE_TOKEN has proper permissions:
             - repo scope for repository access
             - read:org scope for organization access
          3. Ensure you are a member of the target organization
          4. Check if the organization has any access restrictions
          
          ## üîÑ Next Steps
          - Review the workflow logs
          - Fix any identified issues
          - Re-run the workflow manually
          
          ---
          *This issue was created automatically by the Repository Compliance Checker*" \
            --label "compliance-failure,automated" || \
          gh issue create \
            --title "üö® Repository Compliance Check Failed - $(date +%Y-%m-%d)" \
            --body "The automated repository compliance check failed. Please check the workflow run for details."
